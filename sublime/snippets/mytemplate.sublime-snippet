<snippet>
	<content><![CDATA[
//CF: Ankit Singh
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
//#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>

#include<bits/stdc++.h>
using namespace std;

#define     prec(n)         fixed<<setprecision(n)
#define     int             long long int
#define     fast()          ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define     all(x)          begin(x),end(x)
#define     rz(x)           resize(x)
#define		uni(a)			a.resize(distance(a.begin(), unique(all(a))));
#define     asn(x,y)        assign(x,y)
#define     mem(a,b)        memset(a,b,sizeof(a))
#define     sz(x)           ((int)size(x))
#define     eb              emplace_back
#define     pb              push_back
#define     pf              push_front
#define     pob             pop_back
#define     pof             pop_front
#define     ins             insert
#define     vi              vector<int>
#define     vvi             vector<vector<int>>
#define     pii             pair<int,int>
#define     mii             map<int,int>
#define     F               first
#define     S               second
#define     remax(a,b)      a=max(a,b)
#define     remin(a,b)      a=min(a,b)
#define     bitcount(x)     __builtin_popcountll(x)
#define     iceil(n,x)      (((n)-1)/(x)+1)
#define     db1(x)          cout<<#x<<"="<<x<<'\n'
#define     db2(x,y)        cout<<#x<<"="<<x<<","<<#y<<"="<<y<<'\n'
#define     db3(x,y,z)      cout<<#x<<"="<<x<<","<<#y<<"="<<y<<","<<#z<<"="<<z<<'\n'
#define     fo(i,n)         for(int i=0;i<(n);++i)
#define		rep(x,a,b)		for(int x = a;x<(b+1);x++)
#define     dbvec(a)      cout<<#a<<": "; for(auto i:a) cout<<i<<" "; cout<<"\n"
#define     dbpairvec(a)  cout<<#a<<": \n"; for(auto i:a) cout<<i.F<<" "<<i.S<<"\n"
#define     dbvvi(a)        cout<<#a<<":"<<endl; for(auto t:a){for(auto p:t)cout<<p<<" ";cout<<endl;}
#define     dbsegtree(a,n)  cout<<#a<<": "; rep(i,0,n-1) cout<<a.query(i,i).value<<" "; cout<<endl;
#define     dbsegtree2(a,n)  cout<<#a<<": "; rep(i,1,n) cout<<query(1,1,n,i,i)<<" "; cout<<endl;
#define     dbsegtree3(st,n,fin)  cout<<#st<<": "; rep(i,0,n-1) cout<<st.query(i,i).fin<<" "; cout<<endl;
#define     readvec(a,n)    fo(i,n){int x;cin>>x;a.pb(x);}
#define		dbset(a)		cout<<#a<<": "; for(auto itr=a.begin();itr!=a.end();itr++) cout<<*itr<<" "; cout<<endl;
#define		dbbinary(x)		cout<<#x<<": "; cout<<bitset<32>(x).to_string().substr(32 - log2(l))<<endl;

using ull = unsigned long long;
using ll = long long;
using ld = long double;

const ld pi = acos(-1);
const ll inf = 1e18, mod = 1e9 + 7;
const string alphabet = "abcdefghijklmnopqrstuvwxyz";
const ll N = 2e5 + 100;

void test_case()
{
	${1}
}
int32_t main() {
	//clock_t begin = clock();
	fast();
	ll tt = 1;
	cin >> tt;
	for(int i = 1;i<=tt;i++) {
		// cout<<"Case #"<<i<<": ";
		test_case();
	}
	//clock_t end = clock();
	//cout << endl << "Executed in : " << double(end - begin) / CLOCKS_PER_SEC * 1000 << " ms";
	return 0;
}







]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>mytemplate</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
